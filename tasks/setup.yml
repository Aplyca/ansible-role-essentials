---
- name: Configure Python
  block:
    - name: Validate if pip already exists
      stat:
        path: /usr/bin/pip
      register: st

    - name: Enable Phyton 3 symlinks
      become: true
      file:
        src: '{{ item.src }}'
        dest: '/usr/bin/{{ item.dest }}'
        state: link
      with_items:
        - { src: 'python3', dest: 'python' }
        - { src: 'pip3', dest: 'pip' }
      when: ansible_distribution == 'Ubuntu' and ansible_distribution_version >= '16' and st.stat.islnk is not defined

    - name: Upgrade PIP
      become: yes
      shell: "pip install --upgrade pip"
      tags: pip_packages

    - name: Install Python libraries
      become: yes
      pip:
        name: "{{ item }}"
      with_items: "{{ essentials.pip_packages }}"
      tags: pip_packages
  when: ansible_connection != 'docker'

- name: Make sure OS groups are present
  become: yes
  include: group.yml
  with_items: "{{ essentials.groups | default([]) }}"
  loop_control:
    loop_var: group
  tags: essentials_groups

- name: Make sure OS users are present
  become: yes
  include: user.yml
  with_items: "{{ essentials.users | default([]) }}"
  loop_control:
    loop_var: user
  tags: essentials_users

- name: Make sure OS users are configured
  become: true
  become_user: "{{ user.name }}"
  include: configure_user.yml
  with_items: "{{ essentials.users | default([]) }}"
  loop_control:
    loop_var: user
  tags: essentials_users

- name: Make sure mount points are present
  become: yes
  file:
    path: "{{ item.path }}"
    mode: 0777
    state: directory
  with_items: "{{ essentials.mounts }}"

- name: Make sure devices are mounted
  become: yes
  mount:
    name: "{{ item.path }}"
    src: "{{ item.source }}"
    fstype: "{{ item.type | default('ext4') }}"
    opts: "{{ item.options | default('') }}"
    state: mounted
  with_items: "{{ essentials.mounts }}"

- name: Make sure the file system ACLs are present
  acl:
     name: "{{ item.name }}"
     entity: "{{ item.entity  | default(ansible_user_id)}}"
     etype: "{{ item.etype | default('user') }}"
     permissions: "{{ item.permissions | default('rwx') }}"
     default: "{{ item.permissions | default('yes') }}"
     state: "{{ item.state | default('present') }}"
  with_items: "{{ essentials.acl }}"

- name: Create SSl Certificate directories
  become: yes
  file:
    path: "{{ item.path }}"
    state: directory
    mode: 0755
  with_items: "{{ essentials.ssl_certs }}"
  tags: certificates

- name: Create self-signed SSL certificate
  become: yes
  command: "openssl req -x509 -nodes -newkey {{ item.type | default('rsa') }}:{{ item.bits | default('2048') }} -subj '/C={{ item.CountryName | default('AU') }}/ST={{ item.StateName | default('Some-State') }}/O={{ item.OrganizationName | default('Internet Widgits Pty Ltd') }}/CN={{ item.CommonName | default('*.example.com') }}' -days {{ item.days | default('365') }} -keyout {{ item.name }}.key -out {{ item.name }}.crt -extensions v3_ca"
  args:
    chdir: "{{ item.path }}"
    creates: "{{ item.path }}/{{ item.name }}.crt"
  with_items: "{{ essentials.ssl_certs }}"
  tags: certificates

- name: Make sure the SSL certificates directories are present
  become: yes
  file:
    dest: "/etc/ssl/{{ item.name }}"
    state: directory
  with_items: "{{ essentials.certificates }}"
  when: item.name is defined
  no_log: "{{ essentials.no_log }}"
  tags: certificates

- name: Make sure the SSL certificates are present
  become: yes
  copy:
    content: "{{ item.crt }}"
    dest: "/etc/ssl/{{ item.name }}/certificate.crt"
  with_items: "{{ essentials.certificates }}"
  when: item.name is defined and item.crt is defined
  no_log: "{{ essentials.no_log }}"
  tags: certificates

- name: Make sure the SSL certificate keys are present
  become: yes
  copy:
    content: "{{ item.key }}"
    dest: "/etc/ssl/{{ item.name }}/certificate.key"
  with_items: "{{ essentials.certificates }}"
  when: item.name is defined and item.key is defined
  no_log: "{{ essentials.no_log }}"
  tags: certificates

- name: Make sure the SSL certificate intermediates are present
  become: yes
  copy:
    content: "{{ item.intermediate }}"
    dest: "/etc/ssl/{{ item.name }}/intermediate.crt"
  with_items: "{{ essentials.certificates }}"
  when: item.name is defined and item.intermediate is defined
  no_log: "{{ essentials.no_log }}"
  tags: certificates

- name: make sure hosts are present
  become: yes
  lineinfile:
    dest:  "/etc/hosts"
    line: "{{ item.key }} {{ item.value }}"
    state: present
  with_dict: "{{ essentials.hosts |default({}) }}"
  tags: hosts
