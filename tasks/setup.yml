---
- name: Updating crontab
  cron:
    name: "{{ item.name }}"
    state: "{{ item.state | default('present') }}"
    job: "cd {{ item.root | default('~') }} && {{ item.job }}"
    hour: "{{ item.hour | default('*') }}"
    minute: "{{ item.minute | default('*') }}"
    weekday: "{{ item.weekday | default('*') }}"
  with_items: essentials["crons"]
  when: essentials["crons"] is defined

- name: Make sure that the .ssh directory exists
  file:
    path: ~/.ssh
    state: directory
    mode: 0700

- name: Set up authorized_keys
  authorized_key:
    user: "{{ ansible_user_id }}"
    key: "{{ item }}"
  with_items: essentials['ssh']['authorized_keys']
  when: essentials['ssh']['authorized_keys']

- name: Make sure SSH config is present
  template:
    src: home/ansible_user/.ssh/config.j2
    dest: ~/.ssh/config
    mode: 0600
  changed_when: False

- name: Add key to remote user
  copy:
    src: "{{ item.IdentityFileSource }}"
    dest: "~/.ssh/{{ item.IdentityFile }}"
    mode: 0400
  with_items: essentials["ssh"]["config"]
  when: essentials["ssh"]["config"] is defined

- name: Make sure the file system ACLs are present
  acl:
     name: "{{ item.name }}"
     entity: "{{ item.entity  | default(ansible_user_id)}}"
     etype: "{{ item.etype | default('user') }}"
     permissions: "{{ item.permissions | default('rwx') }}"
     default: "{{ item.permissions | default('yes') }}"
     state: "{{ item.state | default('present') }}"
  with_items: essentials["acl"]

- name: Check if an attached device exists
  command: "lsblk {{ essentials['mount']['device'] }}"
  register: attached_device
  changed_when: False
  ignore_errors: True
  when: essentials['mount']['device'] is defined

- name: Create mount point for directory
  sudo: yes
  file:
    path: "{{ essentials['mount']['mount_point'] }}"
    state: directory
    mode: 0775
  when: essentials['mount']['mount_point'] is defined

- name: Mount Attacched Device
  sudo: yes
  mount:
    name: "{{ essentials['mount']['mount_point'] }}"
    src: "{{ essentials['mount']['device'] }}"
    fstype: ext4
    opts: "{{ essentials['mount']['options'] }}"
    state: mounted
  when: essentials['mount']['device'] is defined and attached_device|success
