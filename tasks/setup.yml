---
- name: Updating crontab
  cron:
    name: "{{ item.name }}"
    state: "{{ item.state | default('present') }}"
    job: "cd {{ item.root | default('~') }} && {{ item.job }}"
    hour: "{{ item.hour | default('*') }}"
    minute: "{{ item.minute | default('*') }}"
    weekday: "{{ item.weekday | default('*') }}"
  with_items: "{{ essentials.crons }}"
  when: essentials.crons is defined
  tags: crontab

- name: Make sure that the .ssh directory exists
  file:
    path: ~/.ssh
    state: directory
    mode: 0700

- name: Set up authorized_keys
  authorized_key:
    user: "{{ ansible_user_id }}"
    key: "{{ item }}"
  with_items: "{{ essentials.ssh.authorized_keys }}"
  when: essentials.ssh.authorized_keys

- name: Make sure SSH config is present
  template:
    src: home/ansible_user/.ssh/config.j2
    dest: ~/.ssh/config
    mode: 0600
  changed_when: False
  tags: ssh_keys

- name: Add key to remote user
  copy:
    src: "{{ item.IdentityFileSource }}"
    dest: "~/.ssh/{{ item.IdentityFile }}"
    mode: 0400
  with_items: "{{ essentials.ssh.config }}"
  when: essentials.ssh.config is defined
  tags: ssh_keys

- name: Make sure the file system ACLs are present
  acl:
     name: "{{ item.name }}"
     entity: "{{ item.entity  | default(ansible_user_id)}}"
     etype: "{{ item.etype | default('user') }}"
     permissions: "{{ item.permissions | default('rwx') }}"
     default: "{{ item.permissions | default('yes') }}"
     state: "{{ item.state | default('present') }}"
  with_items: "{{ essentials.acl }}"

- name: Check if an attached device exists
  command: "lsblk {{ essentials['mount']['device'] }}"
  register: attached_device
  changed_when: False
  ignore_errors: True
  when: essentials.mount.device is defined

- name: Mount Attacched Device
  become: yes
  mount:
    name: "{{ essentials.mount.name }}"
    src: "{{ essentials.mount.device }}"
    fstype: ext4
    opts: "{{ essentials.mount.options | default('') }}"
    state: mounted
  when: essentials.mount.device is defined and attached_device|success

- name: Create SSl Certificate directories
  become: yes
  file:
    path: "{{ item.path }}"
    state: directory
    mode: 0755
  with_items: "{{ essentials.ssl_certs }}"
  when: essentials.ssl_certs is defined

- name: Create self-signed SSL certificate
  become: yes
  command: "openssl req -x509 -nodes -newkey {{ item.type | default('rsa') }}:{{ item.bits | default('2048') }} -subj '/C={{ item.CountryName | default('AU') }}/ST={{ item.StateName | default('Some-State') }}/O={{ item.OrganizationName | default('Internet Widgits Pty Ltd') }}/CN={{ item.CommonName | default('*.example.com') }}' -days {{ item.days | default('365') }} -keyout {{ item.name }}.key -out {{ item.name }}.crt -extensions v3_ca"
  args:
    chdir: "{{ item.path }}"
    creates: "{{ item.path }}/{{ item.name }}.crt"
  with_items: "{{ essentials.ssl_certs }}"
  when: essentials.ssl_certs is defined

- name: Add directory to path
  lineinfile:
    dest: "~/.profile"
    line: 'if [ -d "{{ item }}" ]; then PATH="$PATH:{{ item | expanduser }}"; fi'
    state: present
  with_items: "{{ essentials.paths }}"

- name: Make sure the users are configured
  become: yes
  user:
    name: "{{ item.name }}"
    groups: "{{ item.groups }}"
    append: yes
  with_items: "{{ essentials.users }}"
  when: essentials.users is defined
  
- name: Make sure the SSL certificates directories are present
  become: yes
  file:
    dest: "/etc/ssl/{{ item.name }}"
    state: directory
  with_items: "{{ essentials.certificates }}"
  when: item.name is defined
  no_log: True

- name: Make sure the SSL certificates are present
  become: yes
  copy:
    content: "{{ item.crt }}"
    dest: "/etc/ssl/{{ item.name }}/certificate.crt"
  with_items: "{{ essentials.certificates }}"
  notify: 
    - reload apache
    - reload nginx
  when: item.name is defined and item.crt is defined
  no_log: True

- name: Make sure the SSL certificate keys are present
  become: yes
  copy:
    content: "{{ item.key }}"
    dest: "/etc/ssl/{{ item.name }}/certificate.key"
  with_items: "{{ essentials.certificates }}"
  notify: 
    - reload apache
    - reload nginx
  when: item.name is defined and item.key is defined
  no_log: True

- name: Make sure the SSL certificate intermediates are present
  become: yes
  copy:
    content: "{{ item.intermediate }}"
    dest: "/etc/ssl/{{ item.name }}/intermediate.crt"
  with_items: "{{ essentials.certificates }}"
  notify: 
    - reload apache
    - reload nginx
  when: item.name is defined and item.intermediate is defined
  no_log: True
